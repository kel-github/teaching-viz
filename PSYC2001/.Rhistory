beta <- .002
safe <- 57
y_int <- 56.5
x <- runif(100, xmin, xmax) # CO2 concentration (ppm)
y <- y_int + beta*(x) + rnorm(100, 0, 0.5)
y_color <- ifelse(y < safe, "blue", "red")
# plot initial data
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(260, 400), ylim = c(56, 59))
# add line of best fit
abline(lm(y ~ x), col = "black")
# create function to update plot and save each frame for gif
create_frame <- function(x_max){
# calculate new y values based on regression equation
new_y <- y_int + beta*(xmin:x_max)
# plot new data and line of best fit
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(260, x_max), ylim = c(56, 59))
abline(y_int, beta, col = "black")
#lines(xmax:x_max, new_y, col = "purple")
# save plot as png file
filename <- paste0("prediction/frame_", x_max, ".png")
dev.copy(png, filename, width = 600, height = 400)
dev.off()
}
# create frames for gif
for (x_max in c(450, 500, 600, 650, 700, 750)){
create_frame(x_max)
}
# create animated gif from saved frames
library(magick)
frames <- list.files(pattern = "frame_.*\\.png")
frames_list <- lapply(frames, image_read)
frames_joined <- image_join(frames_list)
frames_animate <- image_animate(frames_joined, fps = 2)
frames_animate
image_write(frames_animate, "prediction/prediction_forecast.gif")
set.seed(42) # measning of life
xmin <- 260
xmax <- 400
ymin <- 56
ymax <- 62
beta <- .008
safe <- 57
y_int <- 56.5
x <- runif(100, xmin, xmax) # CO2 concentration (ppm)
y <- y_int + beta*(x) + rnorm(100, 0, 0.5)
y_color <- ifelse(y < safe, "blue", "red")
# plot initial data
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(260, 400), ylim = c(ymin, ymax))
# add line of best fit
abline(lm(y ~ x), col = "black")
set.seed(42) # measning of life
xmin <- 260
xmax <- 400
ymin <- 56
ymax <- 62
beta <- .008
safe <- 57
y_int <- 54.5
x <- runif(100, xmin, xmax) # CO2 concentration (ppm)
y <- y_int + beta*(x) + rnorm(100, 0, 0.5)
y_color <- ifelse(y < safe, "blue", "red")
# plot initial data
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(260, 400), ylim = c(ymin, ymax))
set.seed(42) # measning of life
xmin <- 260
xmax <- 400
ymin <- 56
ymax <- 62
beta <- .008
safe <- 57
y_int <- 55
x <- runif(100, xmin, xmax) # CO2 concentration (ppm)
y <- y_int + beta*(x) + rnorm(100, 0, 0.5)
y_color <- ifelse(y < safe, "blue", "red")
# plot initial data
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(260, 400), ylim = c(ymin, ymax))
# add line of best fit
abline(lm(y ~ x), col = "black")
set.seed(42) # measning of life
xmin <- 260
xmax <- 400
ymin <- 56
ymax <- 62
beta <- .008
safe <- 58
y_int <- 55
x <- runif(100, xmin, xmax) # CO2 concentration (ppm)
y <- y_int + beta*(x) + rnorm(100, 0, 0.5)
y_color <- ifelse(y < safe, "blue", "red")
# plot initial data
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(260, 400), ylim = c(ymin, ymax))
beta <- .09
safe <- 57.5
y_int <- 55
x <- runif(100, xmin, xmax) # CO2 concentration (ppm)
y <- y_int + beta*(x) + rnorm(100, 0, 0.5)
y_color <- ifelse(y < safe, "blue", "red")
# plot initial data
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(260, 400), ylim = c(ymin, ymax))
y
beta <- .009
safe <- 57.5
y_int <- 55
x <- runif(100, xmin, xmax) # CO2 concentration (ppm)
y <- y_int + beta*(x) + rnorm(100, 0, 0.5)
y_color <- ifelse(y < safe, "blue", "red")
# plot initial data
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(260, 400), ylim = c(ymin, ymax))
y
set.seed(42) # measning of life
xmin <- 260
xmax <- 400
ymin <- 56
ymax <- 62
beta <- .009
safe <- 57.5
y_int <- 55
x <- runif(100, xmin, xmax) # CO2 concentration (ppm)
y <- y_int + beta*(x) + rnorm(100, 0, 0.5)
y_color <- ifelse(y < safe, "blue", "red")
# plot initial data
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(260, 400), ylim = c(ymin, ymax))
# add line of best fit
abline(lm(y ~ x), col = "black")
# create function to update plot and save each frame for gif
create_frame <- function(x_max){
# calculate new y values based on regression equation
new_y <- y_int + beta*(xmin:x_max)
# plot new data and line of best fit
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(260, x_max), ylim = c(ymin, ymax))
abline(y_int, beta, col = "black")
#lines(xmax:x_max, new_y, col = "purple")
# save plot as png file
filename <- paste0("prediction/frame_", x_max, ".png")
dev.copy(png, filename, width = 600, height = 400)
dev.off()
}
# create frames for gif
for (x_max in c(450, 500, 600, 650, 700, 750)){
create_frame(x_max)
}
# create animated gif from saved frames
library(magick)
frames <- list.files(pattern = "frame_.*\\.png")
frames_list <- lapply(frames, image_read)
frames_joined <- image_join(frames_list)
frames_animate <- image_animate(frames_joined, fps = 2)
frames_animate
image_write(frames_animate, "prediction/prediction_forecast.gif")
# plot initial data
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(260, 400), ylim = c(ymin, ymax), pch=19)
## written by K. Garner and chatGPT, 2023
## create a plot that shows estimation
## then a gif to demonstrate the point of prediction
## the point is that we don't want to just measure what's happening now,
## we want to predict what's going to happen
# create sample data and define variables
set.seed(42) # measning of life
xmin <- 260
xmax <- 400
ymin <- 56
ymax <- 62
beta <- .009
safe <- 57.5
y_int <- 55
x <- runif(100, xmin, xmax) # CO2 concentration (ppm)
y <- y_int + beta*(x) + rnorm(100, 0, 0.5)
y_color <- ifelse(y < safe, "blue", "red")
# plot initial data
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(260, 400), ylim = c(ymin, ymax), pch=19)
# add line of best fit
abline(lm(y ~ x), col = "black")
# create function to update plot and save each frame for gif
create_frame <- function(x_max){
# calculate new y values based on regression equation
new_y <- y_int + beta*(xmin:x_max)
# plot new data and line of best fit
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(xmin, x_max), ylim = c(ymin, ymax), pch=19)
abline(y_int, beta, col = "black")
#lines(xmax:x_max, new_y, col = "purple")
# save plot as png file
filename <- paste0("prediction/frame_", x_max, ".png")
dev.copy(png, filename, width = 600, height = 400)
dev.off()
}
# create frames for gif
for (x_max in c(450, 500, 600, 650, 700, 750)){
create_frame(x_max)
}
# create animated gif from saved frames
library(magick)
frames <- list.files(pattern = "prediction/frame_.*\\.png")
frames_list <- lapply(frames, image_read)
frames_joined <- image_join(frames_list)
frames_animate <- image_animate(frames_joined, fps = 2)
frames_animate
list.files(pattern = "prediction/frame_.*\\.png")
? list.files
frames <- list.files(path= "prediction/", pattern = "frame_.*\\.png")
frames
frames_list <- lapply(frames, image_read)
frames_joined <- image_join(frames_list)
frames_animate <- image_animate(frames_joined, fps = 2)
frames_animate
frames
## written by K. Garner and chatGPT, 2023
## create a plot that shows estimation
## then a gif to demonstrate the point of prediction
## the point is that we don't want to just measure what's happening now,
## we want to predict what's going to happen
# create sample data and define variables
set.seed(42) # measning of life
xmin <- 260
xmax <- 400
ymin <- 56
ymax <- 62
beta <- .009
safe <- 57.5
y_int <- 55
x <- runif(100, xmin, xmax) # CO2 concentration (ppm)
y <- y_int + beta*(x) + rnorm(100, 0, 0.5)
y_color <- ifelse(y < safe, "blue", "red")
# plot initial data
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(260, 400), ylim = c(ymin, ymax), pch=19)
# add line of best fit
abline(lm(y ~ x), col = "black")
# create function to update plot and save each frame for gif
create_frame <- function(x_max){
# calculate new y values based on regression equation
new_y <- y_int + beta*(xmin:x_max)
# plot new data and line of best fit
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(xmin, x_max), ylim = c(ymin, ymax), pch=19)
abline(y_int, beta, col = "black")
#lines(xmax:x_max, new_y, col = "purple")
# save plot as png file
filename <- paste0("prediction/frame_", x_max, ".png")
dev.copy(png, filename, width = 600, height = 400)
dev.off()
}
# create frames for gif
for (x_max in c(450, 500, 600, 650, 700, 750)){
create_frame(x_max)
}
# create animated gif from saved frames
library(magick)
frames <- list.files(path= "prediction/", pattern = "frame_.*\\.png")
frames_list <- lapply(frames, image_read)
frames
? list.files
frames <- list.files(path= "prediction/", pattern = "frame_.*\\.png", full.names=TRUE)
frames_list <- lapply(frames, image_read)
frames_joined <- image_join(frames_list)
frames_animate <- image_animate(frames_joined, fps = 2)
frames_animate
image_write(frames_animate, "prediction/prediction_forecast.gif")
# plot initial data
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(260, 400), ylim = c(ymin, ymax), pch=19, cex.axis = 1.5, cex.label=1.5)
# plot initial data
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(260, 400), ylim = c(ymin, ymax), pch=19, cex.axis = 1.5, cex.title=1.5)
# plot initial data
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(260, 400), ylim = c(ymin, ymax), pch=19, cex.axis = 1.5, cex.lab=1.5)
## written by K. Garner and chatGPT, 2023
## create a plot that shows estimation
## then a gif to demonstrate the point of prediction
## the point is that we don't want to just measure what's happening now,
## we want to predict what's going to happen
# create sample data and define variables
set.seed(42) # measning of life
xmin <- 260
xmax <- 400
ymin <- 56
ymax <- 62
beta <- .009
safe <- 57.5
y_int <- 55
x <- runif(100, xmin, xmax) # CO2 concentration (ppm)
y <- y_int + beta*(x) + rnorm(100, 0, 0.5)
y_color <- ifelse(y < safe, "blue", "red")
# plot initial data
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(260, 400), ylim = c(ymin, ymax), pch=19, cex.axis = 1.5, cex.lab=1.5)
# add line of best fit
abline(lm(y ~ x), col = "black")
# create function to update plot and save each frame for gif
create_frame <- function(x_max){
# calculate new y values based on regression equation
new_y <- y_int + beta*(xmin:x_max)
# plot new data and line of best fit
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(xmin, x_max), ylim = c(ymin, ymax), pch=19, , cex.axis = 1.5, cex.lab=1.5)
abline(y_int, beta, col = "black")
#lines(xmax:x_max, new_y, col = "purple")
# save plot as png file
filename <- paste0("prediction/frame_", x_max, ".png")
dev.copy(png, filename, width = 600, height = 400)
dev.off()
}
# create frames for gif
for (x_max in c(450, 500, 600, 650, 700, 750)){
create_frame(x_max)
}
# create animated gif from saved frames
library(magick)
frames <- list.files(path= "prediction/", pattern = "frame_.*\\.png", full.names=TRUE)
frames_list <- lapply(frames, image_read)
frames_joined <- image_join(frames_list)
frames_animate <- image_animate(frames_joined, fps = 2)
frames_animate
image_write(frames_animate, "prediction/prediction_forecast.gif")
## written by K. Garner and chatGPT, 2023
## create a plot that shows estimation
## then a gif to demonstrate the point of prediction
## the point is that we don't want to just measure what's happening now,
## we want to predict what's going to happen
# create sample data and define variables
set.seed(42) # measning of life
xmin <- 260
xmax <- 400
ymin <- 56
ymax <- 62
beta <- .009
safe <- 57.5
y_int <- 55
x <- runif(100, xmin, xmax) # CO2 concentration (ppm)
y <- y_int + beta*(x) + rnorm(100, 0, 0.5)
y_color <- ifelse(y < safe, "blue", "red")
# plot initial data
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(260, 400), ylim = c(ymin, ymax), pch=19, cex.axis = 1.5, cex.lab=1.5)
# add line of best fit
abline(lm(y ~ x), col = "black")
# save this plot
dev.copy(png, "prediction/estimation.png", width = 600, height = 400)
dev.off()
## written by K. Garner and chatGPT, 2023
## create a plot that shows estimation
## then a gif to demonstrate the point of prediction
## the point is that we don't want to just measure what's happening now,
## we want to predict what's going to happen
# create sample data and define variables
set.seed(42) # measning of life
xmin <- 260
xmax <- 400
ymin <- 56
ymax <- 62
beta <- .009
safe <- 57.5
y_int <- 55
x <- runif(100, xmin, xmax) # CO2 concentration (ppm)
y <- y_int + beta*(x) + rnorm(100, 0, 0.5)
y_color <- ifelse(y < safe, "blue", "red")
# plot initial data
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(260, 400), ylim = c(ymin, ymax), pch=19, cex.axis = 1.5, cex.lab=1.5)
rm(list=ls())
## written by K. Garner and chatGPT, 2023
## create a plot that shows estimation
## then a gif to demonstrate the point of prediction
## the point is that we don't want to just measure what's happening now,
## we want to predict what's going to happen
# create sample data and define variables
set.seed(42) # measning of life
xmin <- 260
xmax <- 400
ymin <- 56
ymax <- 62
beta <- .009
safe <- 57.5
y_int <- 55
x <- runif(100, xmin, xmax) # CO2 concentration (ppm)
y <- y_int + beta*(x) + rnorm(100, 0, 0.5)
y_color <- ifelse(y < safe, "blue", "red")
# plot initial data
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(260, 400), ylim = c(ymin, ymax), pch=19, cex.axis = 1.5, cex.lab=1.5)
png(filename="prediction/estimation.png", width = 600, height = 400)
# plot initial data
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(260, 400), ylim = c(ymin, ymax), pch=19, cex.axis = 1.5, cex.lab=1.5)
# add line of best fit
abline(lm(y ~ x), col = "black")
# save this plot
dev.off()
create_frame <- function(x_max){
# calculate new y values based on regression equation
new_y <- y_int + beta*(xmin:x_max)
# plot new data and line of best fit
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(xmin, x_max), ylim = c(ymin, ymax), pch=19, cex.axis = 1.5, cex.lab=1.5)
abline(y_int, beta, col = "black")
#lines(xmax:x_max, new_y, col = "purple")
# save plot as png file
filename <- paste0("prediction/frame_", x_max, ".png")
dev.copy(png, filename, width = 600, height = 400)
dev.off()
}
# create frames for gif
for (x_max in c(450, 500, 600, 650, 700, 750)){
create_frame(x_max)
}
## written by K. Garner and chatGPT, 2023
## create a plot that shows estimation
## then a gif to demonstrate the point of prediction
## the point is that we don't want to just measure what's happening now,
## we want to predict what's going to happen
# create sample data and define variables
set.seed(42) # measning of life
xmin <- 260
xmax <- 400
ymin <- 56
ymax <- 62
beta <- .009
safe <- 57.5
y_int <- 55
x <- runif(100, xmin, xmax) # CO2 concentration (ppm)
y <- y_int + beta*(x) + rnorm(100, 0, 0.5)
y_color <- ifelse(y < safe, "blue", "red")
png(filename="prediction/estimation.png", width = 600, height = 400)
# plot initial data
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(260, 400), ylim = c(ymin, ymax), pch=19, cex.axis = 1.5, cex.lab=1.5)
# add line of best fit
abline(lm(y ~ x), col = "black")
# save this plot
dev.off()
# create function to update plot and save each frame for gif
create_frame <- function(x_max){
# calculate new y values based on regression equation
new_y <- y_int + beta*(xmin:x_max)
# plot new data and line of best fit
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(xmin, x_max), ylim = c(ymin, ymax), pch=19, cex.axis = 1.5, cex.lab=1.5)
abline(y_int, beta, col = "black")
#lines(xmax:x_max, new_y, col = "purple")
# save plot as png file
filename <- paste0("prediction/frame_", x_max, ".png")
dev.copy(png, filename, width = 600, height = 400)
dev.off()
}
# create frames for gif
for (x_max in c(450, 500, 600, 650, 700, 750)){
create_frame(x_max)
}
# create frames for gif
for (x_max in c(450, 500, 600, 650, 700, 750)){
create_frame(x_max)
}
set.seed(42) # measning of life
xmin <- 260
xmax <- 400
ymin <- 56
ymax <- 62
beta <- .009
safe <- 57.5
y_int <- 55
x <- runif(100, xmin, xmax) # CO2 concentration (ppm)
y <- y_int + beta*(x) + rnorm(100, 0, 0.5)
y_color <- ifelse(y < safe, "blue", "red")
#png(filename="prediction/estimation.png", width = 600, height = 400)
# plot initial data
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(260, 400), ylim = c(ymin, ymax), pch=19, cex.axis = 1.5, cex.lab=1.5)
# create frames for gif
for (x_max in c(450, 500, 600, 650, 700, 750)){
create_frame(x_max)
}
setwd("~/Documents/teaching/teaching-viz/PSYC2001")
# create frames for gif
for (x_max in c(450, 500, 600, 650, 700, 750)){
create_frame(x_max)
}
getwd()
? dev.copy
## written by K. Garner and chatGPT, 2023
## create a plot that shows estimation
## then a gif to demonstrate the point of prediction
## the point is that we don't want to just measure what's happening now,
## we want to predict what's going to happen
# create sample data and define variables
set.seed(42) # measning of life
xmin <- 260
xmax <- 400
ymin <- 56
ymax <- 62
beta <- .009
safe <- 57.5
y_int <- 55
x <- runif(100, xmin, xmax) # CO2 concentration (ppm)
y <- y_int + beta*(x) + rnorm(100, 0, 0.5)
y_color <- ifelse(y < safe, "blue", "red")
#png(filename="prediction/estimation.png", width = 600, height = 400)
# plot initial data
plot(x, y, col = y_color, xlab = "CO2 concentration (ppm)", ylab = "Global temperature",
xlim = c(260, 400), ylim = c(ymin, ymax), pch=19, cex.axis = 1.5, cex.lab=1.5)
